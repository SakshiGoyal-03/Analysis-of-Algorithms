import java.util.*;

class Edge implements Comparable<Edge> {
    int source, destination, weight;

    public Edge(int source, int destination, int weight) {
        this.source = source;
        this.destination = destination;
        this.weight = weight;
    }

    @Override
    public int compareTo(Edge other) {
        return this.weight - other.weight;
    }
}

public class KruskalAlgorithm {
    public static List<Edge> kruskalMST(List<Edge> edges, int vertices) {
        List<Edge> result = new ArrayList<>();
        DisjointSet disjointSet = new DisjointSet(vertices);

    
        Collections.sort(edges);

        for (Edge edge : edges) {
            int sourceParent = disjointSet.find(edge.source);
            int destinationParent = disjointSet.find(edge.destination);

    
            if (sourceParent != destinationParent) {
                result.add(edge);
                disjointSet.union(sourceParent, destinationParent);
            }
        }

        return result;
    }

    public static void main(String[] args) {
        List<Edge> edges = new ArrayList<>();
        edges.add(new Edge(0, 1, 16));
        edges.add(new Edge(0, 2, 6));
        edges.add(new Edge(0, 3, 5));
        edges.add(new Edge(1, 2, 11));
        edges.add(new Edge(1, 3, 15));
        edges.add(new Edge(2, 3, 4));
    
        List<Edge> mst = kruskalMST(edges, 4);

        System.out.println("Minimum Spanning Tree:");
        for (Edge edge : mst) {
            System.out.println(edge.source + " - " + edge.destination + " : " + edge.weight);
        }
    }
}

class DisjointSet {
    int[] parent;

    public DisjointSet(int n) {
        parent = new int[n];
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    public int find(int x) {
        if (parent[x] != x) {
            parent[x] = find(parent[x]);
        }
        return parent[x];
    }

    public void union(int x, int y) {
        int xParent = find(x);
        int yParent = find(y);
        parent[xParent] = yParent;
    }
}
